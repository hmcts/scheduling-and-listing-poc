package uk.gov.hmcts.reform.sandl;
import uk.gov.hmcts.reform.sandl.model.common.*;
import uk.gov.hmcts.reform.sandl.model.transaction.*;

/*
 * A pair of rules to handle a transactional upsert of a fact
 * (subclass of Identified).  The fact is supplied within an
 * instance of Assert, which also has a transaction identifier.
 * 
 * If a fact with the same ID already exists, it is deleted.
 * The new fact is inserted.
 *
 * Retracting and Asserting facts are inserted to reflect
 * the actions taken, allowing future commit or rollback of
 * the transaction.
 * 
 * If the insert rule were to fire first, then the fact added
 * would match the update condition, so salience is used to
 * ensure that the update rule will always fire first for
 * any given assertion.
 *
 * Low salience rules ensure that assertions are removed at
 * the end of rule processing.
 */
rule "Transactional Update"
	salience 1000001
when
	$assert : Assert ( )
	$fact : Identified ( id == $assert.fact.id )
then
	delete ( $fact )
	insert ( new Retracting( $assert.getTransactionId(), $fact ) );
end

rule "Transactional Insert"
	salience 1000000
when
	$assert : Assert ( )
then
	insert ( $assert.getFact() );
	insert ( new Asserting( $assert.getTransactionId(), $assert.getFact() ) );
	delete ( $assert );
end

/*
 * Handle a transactional delete of a fact (subclass of Identified).
 * The fact is supplied within an instance of Retract, which also
 * has a transaction identifier.
 * 
 * If a fact with the same ID already exists, it is deleted and a
 * Retracting fact is inserted to reflect the action taken, allowing
 * future commit or rollback of the transaction.
 */
rule "Transactional Retract"
	salience 1000000
when
	$retract : Retract ( )
	$fact : Identified ( id == $retract.factId )
then
	delete ( $fact );
	insert ( new Retracting( $retract.getTransactionId(), $fact ) );
	delete ( $retract );
end

/*
 * Roll back an assert performed by a previous transaction.
 */
rule "Rollback Transactional Assert"
	salience 1000000
when
	$rollback : Rollback ( )
	$asserting : Asserting ( transactionId == $rollback.transactionId )
then
	delete ( $asserting.getFact() );
	delete ( $asserting );
end

/*
 * Roll back a retract performed by a previous transaction.
 */
rule "Rollback Transactional Retract"
	salience 1000000
when
	$rollback : Rollback ( )
	$retracting : Retracting ( transactionId == $rollback.transactionId )
then
	insert ( $retracting.getFact() );
	delete ( $retracting );
end

/*
 * Commit an assert performed by a previous transaction.
 * This just removes the fact that links the asserting fact to the
 * transaction, making the fact permanent.
 */
rule "Commit Transactional Assert"
	salience 1000000
when
	$commit : Commit ( )
	$asserting : Asserting ( transactionId == $commit.transactionId )
then
	delete ( $asserting );
end

/*
 * Commit a retract performed by a previous transaction.
 * This just removes the fact that caches the deleted fact and links it
 * to the transaction, making removal of the fact permanent.
 */
rule "Commit Transactional Retract"
	salience 1000000
when
	$commit : Commit ( )
	$retracting : Retracting ( transactionId == $commit.transactionId )
then
	delete ( $retracting );
end

/*
 * Remove any Commit instances.  These are intended only to survive for
 * a single execution of the rules engine, so are removed with a very
 * low salience to ensure all relevant processing has already been done.
 */
rule "Clean Up Transaction Commit"
	salience -1000000
when
	$commit : Commit ( )
then
	delete ( $commit );
end

/*
 * Remove any Rollback instances.  These are intended only to survive for
 * a single execution of the rules engine, so are removed with a very
 * low salience to ensure all relevant processing has already been done.
 */
rule "Clean Up Transaction Rollback"
	salience -1000000
when
	$rollback : Rollback ( )
then
	delete ( $rollback );
end